<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.jhta.bang.finalproject.dao.AdminDAO">


<!-- 대시보드에 최신 주문 가져오는 쿼리 -->
    <select id="getFourPaymentDetail" resultType="PaymentDetailDTO">
        SELECT
        pd.payment_detail_number AS paymentDetailNumber,
        pd.product_count AS productCount,
        pd.product_price AS productPrice,
        pd.payment_detail_status AS paymentDetailStatus,
        pd.product_number AS productNumber,
        p.payment_number AS paymentNumber,
        pr.product_name AS productName
        FROM payment_detail pd
        INNER JOIN payment p ON pd.payment_number = p.payment_number
        INNER JOIN product pr ON pd.product_number = pr.product_number
        ORDER BY pd.payment_detail_number DESC
        LIMIT 4;

    </select>



    <select id="getPriceYear" resultType="PaymentDetailDTO">
        SELECT
        DATE_FORMAT(p.payment_date, '%Y 년') AS year,
        SUM(pd.product_price) / COUNT(DISTINCT pd.payment_number) AS averageYear
        FROM
        bang.payment_detail pd
        INNER JOIN
        bang.payment p ON pd.payment_number = p.payment_number
        GROUP BY
        DATE_FORMAT(p.payment_date, '%Y')
        ORDER BY year DESC
        LIMIT 1;
    </select>


    <select id="getSalesAvgMonth" resultType="PaymentDetailDTO">
        SELECT
        DATE_FORMAT(p.payment_date, '%m 월') AS month,
        SUM(pd.product_price) / COUNT(DISTINCT pd.payment_number) AS averageMonth
        FROM
        bang.payment_detail pd
        INNER JOIN
        bang.payment p ON pd.payment_number = p.payment_number
        GROUP BY
        DATE_FORMAT(p.payment_date, '%Y-%m')
        ORDER BY month DESC
        LIMIT 1;
    </select>

    <select id="memberCount" resultType="MemberDTO">
        SELECT DATE_FORMAT(member_insertdate, '%m') AS month,
        COUNT(*) AS cnt
        FROM member
        GROUP BY month
        ORDER BY month DESC;
    </select>

<!-- 대시보드에 최신 QNA 가져오는 쿼리 -->
    <select id="getDashboardQna" resultType="QnaDTO">
        SELECT
        qna_number as qnaNumber,
        qna_title as qnaTitle,
        qna_writer as qnaWriter,
        qna_type as qnaType
        FROM qna
        WHERE qna_step = 0
        ORDER BY qna_number DESC
        LIMIT 5;
    </select>

    <select id="getTotalReply" resultType="int">
        SELECT count(*)cnt
        FROM product_reply
    </select>
    <select id="getTotalPaymentDetail" resultType="int">
        SELECT count(*)cnt
        FROM payment_detail
    </select>
    <select id="getTotalMember" resultType="int">
        SELECT count(*)cnt
        FROM member
    </select>
    <select id="getTotalService" resultType="int">
        SELECT count(*)cnt
        FROM service
    </select>
    <select id="getTotalProduct" resultType="int">
        SELECT count(*)cnt
        FROM product
    </select>


    <select id="getPaymentPaging" resultType="PaymentDetailDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        payment_detail_number AS paymentDetailNumber,
        product_count AS productCount,
        product_price AS productPrice,
        payment_detail_status AS paymentDetailStatus,
        product_number AS productNumber
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY payment_number DESC) AS rn,
        payment_detail_number,
        product_count,
        product_price,
        payment_detail_status,
        product_number
        FROM payment_detail
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}

    </select>

    <update id="updatePaymentList" parameterType="PaymentDetailDTO">
        UPDATE payment_detail
        SET payment_detail_status = #{paymentDetailStatus}
        WHERE payment_detail_number = #{paymentDetailNumber};
    </update>

    <select id="getMemberPaging" resultType="MemberDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        member_id,
        member_pw,
        member_token,
        member_name,
        member_phone,
        member_postal,
        member_address1,
        member_address2,
        member_email,
        email_check,
        member_insertdate,
        member_type,
        member_profile,
        role_number,
        grade_number,
        platformtype_number
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY member_id DESC) AS rn,
        member_id,
        member_pw,
        member_token,
        member_name,
        member_phone,
        member_postal,
        member_address1,
        member_address2,
        member_email,
        email_check,
        member_insertdate,
        member_type,
        member_profile,
        role_number,
        grade_number,
        platformtype_number
        FROM member
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}

    </select>

    <delete id="memberDelete" parameterType="String">
        DELETE FROM member
        where member_id = #{member_id}
    </delete>

    <select id="memberDetail" parameterType="String" resultType="MemberDTO">
        select member_id, member_pw, member_token, member_name, member_email, role_number, grade_number, platformtype_number,
        member_address1, member_address2, member_phone
        FROM member
        where member_id = #{member_id}
    </select>

    <update id="updateMemberDetail" parameterType="MemberDTO">
        UPDATE member
        SET member_id = #{member_id}, member_pw = #{member_pw}, member_name = #{member_name},member_phone = #{member_phone},  member_email = #{member_email}
        , role_number = #{role_number}, grade_number = #{grade_number}, member_address1 = #{member_address1}, member_address2 = #{member_address2}
        WHERE member_id = #{member_id};
    </update>




    <select id="getServicePaging" resultType="ServiceDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        service_number AS serviceNumber,
        service_contents AS serviceContents,
        service_email AS serviceEmail,
        service_type AS serviceType,
        payment_detail_number AS paymentDetailNumber
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY service_number DESC) AS rn,
        service_number,
        service_contents,
        service_email,
        service_type,
        payment_detail_number
        FROM service
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}

    </select>
    <update id="updateServiceList" parameterType="ServiceDTO">
        UPDATE service
        SET service_type = #{serviceType}
        WHERE service_number = #{serviceNumber};
    </update>

    <delete id="serviceDelete" parameterType="int">
        DELETE FROM servicegetProductPaging
        where service_number = #{serviceNumber}
    </delete>



    <select id="getProductPaging" resultType="ProductDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        product_number AS productNumber,
        product_name AS productName,
        product_price AS productPrice,
        product_stock AS productStock,
        product_detail AS productDetail,
        product_regist AS productRegist,
        category_number AS categoryNumber
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY product_number DESC) AS rn,
        product_number,
        product_name,
        product_price,
        product_stock,
        product_detail,
        product_regist,
        category_number
        FROM product
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}
    </select>



    <update id="updateProductList" parameterType="ProductDTO">
        UPDATE product
        SET product_detail = #{productDetail}
        WHERE product_number = #{productNumber};
    </update>

    <delete id="productDelete" parameterType="int">
        DELETE FROM product
        where product_number = #{productNumber}
    </delete>


    <select id="productDetail" parameterType="int" resultType="ProductDTO">
        select
        product_number AS productNumber,
        product_name AS productName,
        product_price AS productPrice,
        product_stock AS productStock,
        product_detail AS productDetail,
        product_regist AS productRegist,
        category_number AS categoryNumber
        FROM product
        where product_number = #{productNumber}
    </select>

    <update id="updateProductModify" parameterType="ProductDTO">
        UPDATE product
        SET product_number = #{productNumber}, product_name = #{productName}, product_price = #{productPrice},product_stock = #{productStock},  product_detail = #{productDetail}
        , product_regist = #{productRegist}, category_number = #{categoryNumber}
        WHERE product_number = #{productNumber}
    </update>


    <select id="getAllNotice" resultType="NoticeDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber, notice_number AS noticeNumber, notice_title AS noticeTitle, notice_contents AS noticeContents, notice_writer AS noticeWriter, notice_date AS noticeDate, member_id AS memberId
        FROM ( SELECT ROW_NUMBER() OVER (ORDER BY notice_number DESC) AS rn, notice_number, notice_title, notice_contents, notice_writer, notice_date, member_id
        FROM notice
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}
    </select>
    <select id="getTotalNotice" resultType="int">
        SELECT count(*)cnt
        FROM notice
    </select>
    <select id="selectOneNotice" parameterType="int" resultType="NoticeDTO">
        SELECT notice_number AS noticeNumber, notice_title AS noticeTitle, notice_contents AS noticeContents, notice_writer AS noticeWriter, notice_date AS noticeDate, member_id AS memberId
        FROM notice
        WHERE notice_number = #{noticeNumber}
    </select>
    <insert id="insertOneNotice" parameterType="NoticeDTO">
        INSERT INTO notice (notice_title, notice_contents, notice_writer, notice_date, member_id)
        VALUES (#{noticeTitle}, #{noticeContents}, #{noticeWriter}, DATE_FORMAT(NOW(), '%y-%m-%d'), 'b')
    </insert>
    <update id="updateOneNotice" parameterType="NoticeDTO">
        UPDATE notice
        SET notice_writer = #{noticeWriter}, notice_title = #{noticeTitle}, notice_contents = #{noticeContents}
        WHERE notice_number = #{noticeNumber}
    </update>
    <delete id="deleteOneNotice" parameterType="int">
        DELETE FROM notice
        WHERE notice_number = #{noticeNumber}
    </delete>

    <select id="findAllReply" resultType="ReviewDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        reply_number AS replyNumber,
        reply_contents AS replyContents,
        reply_writer AS replyWriter,
        reply_date AS replyDate,
        reply_step AS replyStep,
        reply_ref_order AS replyRefOrder,
        reply_ref AS replyRef,
        reply_answer_number AS replyAnswerNumber,
        reply_parent_number AS replyParentNumber,
        reply_score AS replyScore,
        product_number AS productNumber
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY reply_ref DESC) AS rn,
        reply_number,
        reply_contents,
        reply_writer,
        reply_date,
        reply_step,
        reply_ref_order,
        reply_ref,
        reply_answer_number,
        reply_parent_number,
        reply_score,
        product_number
        FROM product_reply
        WHERE reply_step = 0
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}
        AND reply_step = 0;

    </select>
    <select id="getTotalReview" resultType="int">
        SELECT count(*)cnt
        FROM product_reply
    </select>

    <select id="findByReply_number" resultType="ReviewDTO">
        SELECT reply_number AS replyNumber,
        reply_contents AS replyContents,
        reply_writer AS replyWriter,
        reply_date AS replyDate,
        reply_ref AS replyRef,
        reply_step AS replyStep,
        reply_ref_order AS replyRefOrder,
        reply_answer_number AS replyAnswerNumber,
        reply_parent_number AS replyParentNumber,
        reply_score AS replyScore,
        product_number AS productNumber
        FROM product_reply
        WHERE reply_number = #{replyNumber};
    </select>
    <delete id="deleteReview" parameterType="int">
        DELETE FROM product_reply
        WHERE reply_number = #{replyNumber};
    </delete>

    <update id="modifyReview" parameterType="ReviewDTO">
        UPDATE product_reply
        SET reply_contents = #{replyContents}, reply_score = #{replyScore}
        WHERE reply_number = #{replyNumber};
    </update>

</mapper>