<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.jhta.bang.finalproject.dao.AdminDAO">


<!-- 대시보드에 최신 주문 가져오는 쿼리 -->
    <select id="getFourPaymentDetail" resultType="PaymentDetailDTO">
        SELECT
        pd.payment_detail_number AS paymentDetailNumber,
        pd.product_count AS productCount,
        pd.product_price AS productPrice,
        pd.payment_detail_status AS paymentDetailStatus,
        pd.product_number AS productNumber,
        p.payment_number AS paymentNumber,
        pr.product_name AS productName
        FROM payment_detail pd
        INNER JOIN payment p ON pd.payment_number = p.payment_number
        INNER JOIN product pr ON pd.product_number = pr.product_number
        ORDER BY pd.payment_detail_number DESC
        LIMIT 4;

    </select>



    <select id="getPriceYear" resultType="PaymentDetailDTO">
        SELECT
        DATE_FORMAT(p.payment_date, '%Y 년') AS year,
        SUM(pd.product_price) / COUNT(DISTINCT pd.payment_number) AS averageYear
        FROM
        bang.payment_detail pd
        INNER JOIN
        bang.payment p ON pd.payment_number = p.payment_number
        GROUP BY
        DATE_FORMAT(p.payment_date, '%Y')
        ORDER BY year DESC
        LIMIT 1;
    </select>


    <select id="getSalesAvgMonth" resultType="PaymentDetailDTO">
        SELECT
        DATE_FORMAT(p.payment_date, '%m 월') AS month,
        SUM(pd.product_price) / COUNT(DISTINCT pd.payment_number) AS averageMonth
        FROM
        bang.payment_detail pd
        INNER JOIN
        bang.payment p ON pd.payment_number = p.payment_number
        GROUP BY
        DATE_FORMAT(p.payment_date, '%Y-%m')
        ORDER BY month DESC
        LIMIT 1;
    </select>

<!-- 대시보드에 최신 QNA 가져오는 쿼리 -->
    <select id="getDashboardQna" resultType="QnaDTO">
        SELECT
        qna_number as qnaNumber,
        qna_title as qnaTitle,
        qna_writer as qnaWriter,
        qna_type as qnaType
        FROM qna
        WHERE qna_step = 0
        ORDER BY qna_number DESC
        LIMIT 5;
    </select>

    <select id="getTotal" resultType="int">
        SELECT count(*)cnt
        FROM product_reply
    </select>


    <select id="getPaymentPaging" resultType="PaymentDetailDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        payment_detail_number AS paymentDetailNumber,
        product_count AS productCount,
        product_price AS productPrice,
        payment_detail_status AS paymentDetailStatus,
        product_number AS productNumber
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY payment_number DESC) AS rn,
        payment_detail_number,
        product_count,
        product_price,
        payment_detail_status,
        product_number
        FROM payment_detail
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}

    </select>

    <update id="updatePaymentList" parameterType="PaymentDetailDTO">
        UPDATE payment_detail
        SET payment_detail_status = #{paymentDetailStatus}
        WHERE payment_detail_number = #{paymentDetailNumber};
    </update>

    <select id="getMemberPaging" resultType="MemberDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        member_id,
        member_pw,
        member_token,
        member_name,
        member_phone,
        member_postal,
        member_address1,
        member_address2,
        member_email,
        email_check,
        member_insertdate,
        member_type,
        member_profile,
        role_number,
        grade_number,
        platformtype_number
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY member_id DESC) AS rn,
        member_id,
        member_pw,
        member_token,
        member_name,
        member_phone,
        member_postal,
        member_address1,
        member_address2,
        member_email,
        email_check,
        member_insertdate,
        member_type,
        member_profile,
        role_number,
        grade_number,
        platformtype_number
        FROM member
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}

    </select>

    <delete id="memberDelete" parameterType="String">
        DELETE FROM member
        where member_id = #{member_id}
    </delete>

    <select id="memberDetail" parameterType="String" resultType="MemberDTO">
        select member_id, member_pw, member_token, member_name, member_email, role_number, grade_number, platformtype_number,
        member_address1, member_address2, member_phone
        FROM member
        where member_id = #{member_id}
    </select>

    <update id="updateMemberDetail" parameterType="MemberDTO">
        UPDATE member
        SET member_id = #{member_id}, member_pw = #{member_pw}, member_name = #{member_name},member_phone = #{member_phone},  member_email = #{member_email}
        , role_number = #{role_number}, grade_number = #{grade_number}, member_address1 = #{member_address1}, member_address2 = #{member_address2}
        WHERE member_id = #{member_id};
    </update>




    <select id="getServicePaging" resultType="ServiceDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        service_number AS serviceNumber,
        service_contents AS serviceContents,
        service_email AS serviceEmail,
        service_type AS serviceType,
        payment_detail_number AS paymentDetailNumber
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY service_number DESC) AS rn,
        service_number,
        service_contents,
        service_email,
        service_type,
        payment_detail_number
        FROM service
        ) AS derived
        WHERE rn BETWEEN #{startNo} AND #{endNo}

    </select>
    <update id="updateServiceList" parameterType="ServiceDTO">
        UPDATE service
        SET service_type = #{serviceType}
        WHERE service_number = #{serviceNumber};
    </update>

    <delete id="serviceDelete" parameterType="int">
        DELETE FROM service
        where service_number = #{serviceNumber}
    </delete>
</mapper>