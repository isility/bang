<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.jhta.bang.finalproject.dao.ReviewDAO">
    <!-- 테이블 모든 값 조회 -->
    <select id="getAll" resultType="ReviewDTO">
        SELECT reply_number AS replyNumber,
        reply_contents AS replyContents,
        reply_writer AS replyWriter,
        reply_date AS replyDate,
        reply_step AS replyStep,
        reply_ref_order AS replyRefOrder,
        reply_ref AS replyRef,
        reply_answer_number AS replyAnswerNumber,
        reply_parent_number AS replyParentNumber,
        reply_score AS replyScore,
        product_number AS productNumber
        FROM product_reply
        WHERE reply_step = 0
        ORDER BY reply_ref DESC;
    </select>
    <!--페이징 처리한 리스트-->
    <select id="findAllReply" resultType="ReviewDTO" parameterType="StartEnd">
        SELECT rn AS rowNumber,
        reply_number AS replyNumber,
        reply_contents AS replyContents,
        reply_writer AS replyWriter,
        reply_date AS replyDate,
        reply_step AS replyStep,
        reply_ref_order AS replyRefOrder,
        reply_ref AS replyRef,
        reply_answer_number AS replyAnswerNumber,
        reply_parent_number AS replyParentNumber,
        reply_score AS replyScore,
        product_number AS productNumber,
        derived.member_id
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY reply_ref DESC) AS rn,
        reply_number,
        reply_contents,
        reply_writer,
        reply_date,
        reply_step,
        reply_ref_order,
        reply_ref,
        reply_answer_number,
        reply_parent_number,
        reply_score,
        product_number,
        member_id
        FROM product_reply
        WHERE reply_step = 0
        ) AS derived
        INNER JOIN member m ON derived.member_id = m.member_id
        WHERE rn BETWEEN #{startNo} AND #{endNo}
        AND reply_step = 0;
    </select>

    <select id="getTotal" resultType="int">
        SELECT count(*)cnt
        FROM product_reply
    </select>

    <select id="findAllByReplyRef"  resultType="ReviewDTO" parameterType="int">
        SELECT reply_number AS replyNumber,
        reply_contents AS replyContents,
        reply_writer AS replyWriter,
        reply_date AS replyDate,
        reply_step AS replyStep,
        reply_ref_order AS replyRefOrder,
        reply_ref AS replyRef,
        reply_answer_number AS replyAnswerNumber,
        reply_parent_number AS replyParentNumber,
        reply_score AS replyScore,
        product_number AS productNumber
        FROM product_reply
        WHERE reply_parent_number = #{replyNumber} and reply_step != 0
    </select>


    <insert id="writeReply" parameterType="ReviewDTO">
        INSERT INTO product_reply (reply_contents, reply_writer,
        reply_date, reply_ref, reply_step, reply_ref_order,
        reply_answer_number, reply_parent_number, reply_score, product_number, member_id)
        VALUES (#{replyContents}, #{member_id}, DATE_FORMAT(NOW(), '%y-%m-%d'),
        (SELECT IFNULL(MAX_reply_ref, 0) + 1 FROM (SELECT MAX(reply_ref) AS MAX_reply_ref FROM product_reply) AS temp), 0, 0, 0, 0, #{replyScore}, #{productNumber}, #{member_id})

    </insert>





    <!-- 테이블 모든 값 reply_number로 조회 -->
    <select id="findByReply_number" resultType="ReviewDTO">
        SELECT reply_number AS replyNumber,
        reply_contents AS replyContents,
        reply_writer AS replyWriter,
        reply_date AS replyDate,
        reply_ref AS replyRef,
        reply_step AS replyStep,
        reply_ref_order AS replyRefOrder,
        reply_answer_number AS replyAnswerNumber,
        reply_parent_number AS replyParentNumber,
        reply_score AS replyScore,
        product_number AS productNumber
        FROM product_reply
        WHERE reply_number = #{replyNumber};
    </select>
    <delete id="deleteReview" parameterType="int">
        DELETE FROM product_reply
        WHERE reply_number = #{replyNumber}
    </delete>

    <update id="modifyReview" parameterType="ReviewDTO">
        UPDATE product_reply
        SET reply_contents = #{replyContents}, reply_score = #{replyScore}
        WHERE reply_number = #{replyNumber}
    </update>


    <!-- 게시글 번호로 순서 가져오는 쿼리-->
    <select id="getReplyRefOrderByReplyNumber" resultType="int" parameterType="int">
        SELECT reply_ref_order AS replyRefOrder
        FROM product_reply
        WHERE reply_number = #{replyNumber}
    </select>


    <!-- 게시글번호로 ref를 가져오는 쿼리-->
    <select id="getReplyRefByReplyNumber" resultType="int">
        SELECT reply_ref AS replyRef,
        reply_ref
        FROM product_reply
        WHERE reply_number = #{replyNumber}
    </select>

    <insert id="setReplyFirst" parameterType="ReviewDTO">
        INSERT INTO product_reply
        (reply_contents, reply_writer, reply_date, reply_ref, reply_step, reply_ref_order,
        reply_answer_number, reply_parent_number, reply_score, product_number)
        VALUES
        (#{replyContents}, #{replyWriter}, DATE_FORMAT(NOW(), '%y-%m-%d'), #{replyRef}, 1,
        1, 0, #{replyNumber}, null, #{productNumber})
    </insert>



    <insert id="setReplyFirstStep" parameterType="ReviewDTO">
        INSERT INTO product_reply
        (reply_contents, reply_writer, reply_date, reply_ref, reply_step, reply_ref_order,
        reply_answer_number, reply_parent_number, reply_score, product_number)
        VALUES
        (#{replyContents}, #{replyWriter}, DATE_FORMAT(NOW(), '%y-%m-%d'), #{replyRef}, 1,
        (SELECT IFNULL(MAX(reply_ref_order), 0) + 1 FROM product_reply WHERE reply_ref = #{replyRef}), 0,
        #{replyParentNumber}, null, #{productNumber})
    </insert>


    <update id="updateAnswerNumber" parameterType="int">
        UPDATE product_reply
        SET reply_answer_number = (SELECT COUNT(*) FROM product_reply WHERE reply_number = #{replyNumber})
        WHERE reply_number = #{replyNumber}
    </update>

    <!--가장 큰 ref 값 찾아오는 쿼리문-->
    <select id="findNvlRef" parameterType="int" resultType="int">
        SELECT COALESCE(MAX(reply_ref), 0) FROM reply_product WHERE reply_number = #{reply_number}
    </select>

    <select id="getReplyNumber" parameterType="int" resultType="int">
        SELECT IFNULL(MAX(ref), 0) FROM product_reply p WHERE p.reply_number = #{replyNumber}
    </select>




    <!--    <select id="findCommentsByReplyNumber" resultType="ReviewDTO" parameterType="int">-->
<!--        SELECT-->
<!--        reply_number AS replyNumber,-->
<!--        reply_contents AS replyContents,-->
<!--        reply_writer AS replyWriter,-->
<!--        reply_date AS replyDate,-->
<!--        reply_step AS replyStep,-->
<!--        reply_ref_order AS replyRefOrder,-->
<!--        reply_answer_number AS replyAnswerNumber,-->
<!--        reply_parent_number AS replyParentNumber,-->
<!--        reply_score AS replyScore,-->
<!--        product_number AS productNumber-->
<!--        FROM product_reply-->
<!--        WHERE reply_ref = #{replyRef} AND reply_step != 0-->
<!--        ORDER BY reply_ref_order ASC;-->
<!--    </select>-->




<!--    <select id="getProductDetail" resultType="reviewDTO">-->
<!--        SELECT-->
<!--        pr.reply_contents AS replyContents,-->
<!--        pr.reply_writer AS replyWriter,-->
<!--        pr.reply_date AS replyDate,-->
<!--        pr.reply_ref AS replyRef,-->
<!--        pr.reply_step AS replyStep,-->
<!--        pr.reply_ref_order AS replyRefOrder,-->
<!--        pr.reply_answer_number AS replyAnswerNumber,-->
<!--        pr.reply_parent_number AS replyParentNumber,-->
<!--        pr.reply_score AS replyScore,-->
<!--        pr.product_number AS productNumber,-->
<!--        p.product_name AS productName,-->
<!--        payD.product_detail_number AS productDetailNumber,-->
<!--        payD.product_count AS productCount,-->
<!--        payD.payment_detail_status-->
<!--        FROM product_reply pr-->
<!--        INNER JOIN product p ON pr.product_number = p.product_number-->
<!--        INNER JOIN payment_detail payD ON pr.product_number = payD.product_number-->
<!--        INNER JOIN payment pay ON payD.payment_number = pay.payment_number-->
<!--        WHERE payD.payment_detail_number = #{paymentDetailNumber}-->
<!--        AND pay.member_id = #{member_id}-->
<!--        AND payD.payment_detail_status = '배송완료'-->
<!--    </select>-->



</mapper>



